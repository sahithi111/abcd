import java.util.Arrays;
import java.util.Scanner;
 
public class StatisticsOfStrings {
	static int[] ar;
	
	static int calculatePower(int a, int b, int mod) {
		if (b == 0) {
			return 1;
		}
		int power = calculatePower(a, b / 2, mod);
		power = (int) ((long) power * power % mod);
		if (b % 2 == 1) {
			power = (int) ((long) power * a % mod);
		}
		return power;
	}
	
	static int find(int i) {
		if (ar[i] < 0) 
			return i;
		 else 
			return ar[i] = find(ar[i]);
		
	}
	
	static boolean join(int i, int j) {
		i = find(i);
		j = find(j);
		if (i == j)
			return false;
		if (ar[i] > ar[j])
			ar[i] = j;
		else {
			if (ar[i] == ar[j])
				ar[i] -= 1;
			ar[j] = i;
		}
		return true;
	}
	
	static int solve(int m, int v, int n, int a, int mod) {
		Arrays.fill(ar, -1);
		int bcnt = 0, cnt = n;
		for (int i = 1; i < n; i++)
			if ((v & 1 << i) > 0) {
				for (int j = i; j < i + m; j++)
					if (join(j, j - i))
						cnt--;
				bcnt++;
			}
		int s = calculatePower(a, cnt, mod);
		return bcnt % 2 == 1 ? s : (mod - s) % mod;
	}
	
	static int solution(int n, int a, int mod) {
		ar = new int[n];
		int sum = 0;
		for (int k = 1; k < n; k++) {
			for (int v = 2; v < 1 << n - k + 1; v += 2) {
				sum = (sum + solve(k, v, n, a, mod)) % mod;
			}
		}
		return sum;
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a = sc.nextInt();
		int mod = sc.nextInt();
		int res = solution(n, a, mod);
		System.out.println(res);
	}
}

import java.util.Scanner;

public class RodCutting {
    public static int countSpecialRods(int n) {
        int count = 0;
        int k = 3;
        if(n < 3)
            return 0;
        else {
            while(k <= n) {
                k = (k << 1) + 1;
                count = count + 1;
            }
        }
        return count;
    }
    public static void main(String args[] ) throws Exception {
        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        for(int t = 1;t <= test;t++) {
            int n = sc.nextInt();
            int res = countSpecialRods(n);
            System.out.println(res);
        }
    }
}

import java.util.*;
import java.io.*;

public class HelpOutIndianArmy
{
    public static void main(String args[]) 
	{
       	Scanner sc = new Scanner(System.in);
		int n =sc.nextInt();
		long s = sc.nextLong();
		long e = sc.nextLong();
		TreeMap<Long,Long> tree1=new TreeMap<Long,Long>();
		TreeMap<Long,Long> tree2=new TreeMap<Long,Long>();
		for(int i=0;i<n;i++)
		{
			long x = sc.nextLong();
			long y = sc.nextLong();
			tree1.put((x-y),(x+y));
    }
    List<Long> list1=new ArrayList<Long>(tree1.keySet());
    List<Long> list2=new ArrayList<Long>(tree1.values());
    	long p = list1.get(0);
		long q = list2.get(0);
		for(int i=1;i<tree1.size();i++)
		{
			if(list1.get(i)<=q)
				q= Math.max(q,list2.get(i));
			else
			{
				
				tree2.put(p,q);
				p = list1.get(i);
				q= list2.get(i);
			}
			
		}
		tree2.put(p,q);
	 	int i;
		long a = 0;
    list1=new ArrayList<Long>(tree2.keySet());
    list2=new ArrayList<Long>(tree2.values());
		for(i=0;i<list1.size();i++)
		{
			if(s>=e)
			{
				s=e;
				break;
			}
			if(list1.get(i)<=s && s<=list2.get(i))
				s = list2.get(i);
			else if(s<=list1.get(i) && e>=list2.get(i))
			{
				a+=list1.get(i)-s;
				s = list2.get(i);
				
			}
			else if(s<=list1.get(i) && e>=list1.get(i) &&  e<=list2.get(i))
			{
				a+=list1.get(i)-s;
				s = e;
			}
			else if(s<=list1.get(i) && e<=list1.get(i))
			{
				a+=e-s;
				s = e;
			}
		}
		if(s<e)
			a+=e-s;
		System.out.println(a);
	}
}
import java.util.*;
import java.io.*;
public class DescendingWeights {
    public static void main(String args[] ) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int ar[] = new int[n];
        ArrayList<Integer>[] weight = (ArrayList<Integer>[]) new ArrayList[k];
        for (int i=0; i < k; i++)
            weight[i] = new ArrayList<>();
        for(int i = 0;i < n;i++) {
           ar[i] = sc.nextInt();
           weight[ar[i]%k].add(ar[i]);
        }
        for(int j = k-1;j >= 0;j--) {
            Collections.sort(weight[j]);
            for(int i = 0;i < weight[j].size();i++) {
                System.out.print(weight[j].get(i));
                System.out.print(" ");
            }
        }
    }
}

import java.io.*;
import java.util.*;

class TestClass {
    static long total(String s,long k) {
        ArrayList<Integer>list = new ArrayList<Integer>();
        long res = 0;
        long low = 1; 
		long high=(long)Math.pow(10,15);
		long mid = 0;
        for(int i = 0;i < s.length();i++) {
            if(s.charAt(i) == '1') {
                list.add(i+1);
            }
        }
        while (low <= high) {
			mid = (low + high) / 2;
			if (getMultiples(list,mid) >= k) {
				res = mid;
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
			return res;
    }
   public static long getMultiples(ArrayList<Integer>list,long k) {
        long res = 0;
        for(long i = 1;i < (1 << list.size());i++) {
            long x = 1;
            long y = -1;
            for (int j = 0; j < list.size(); j++) {
                if(((i >> j) & 1) == 1) {
                    x = x * list.get(j);
                    y = y * -1;
                }
            }
            res = res + (k / x) * y;
        }
        return res;
    }
    public static void main(String args[] ) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int test = Integer.parseInt(br.readLine());
        for(int t = 1;t <= test;t++) {
            String s = br.readLine();
            long k = Long.parseLong(br.readLine());
            System.out.println(total(s,k));
        }
    }
}
import java.util.*;
import java.io.*;
 
public class MetroPath {
	public static void main(String[] args) {
		Metro metro = new Metro();
		metro.solve();
	}
 
	static class Metro {
		ArrayList<Edge>[] list;
		long[] mintime;
 
		public void solve() {
			Scanner s = new Scanner(System.in);
			int n = s.nextInt();
			int m = s.nextInt();
			list = new ArrayList[n];
			mintime = new long[n];
			for (int i = 0; i < n; ++i)
				list[i] = new ArrayList<>();
			for (int i = 0; i < m; ++i) {
				int k = s.nextInt();
				int t = s.nextInt();
				int[] ar = new int[k];
				for (int j = 0; j < k; ++j) {
					ar[j] = s.nextInt() - 1;
				}
				long max = t;
				for (int j = 1; j < k; ++j) {
					long cur = s.nextLong();
					list[ar[j - 1]].add(new Edge(max, ar[j], cur));
					max += cur;
				}
			}
			int start = s.nextInt() - 1, end = s.nextInt() - 1;
			PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
 
				public int compare(Integer i1, Integer i2) {
					return Long.compare(mintime[i1], mintime[i2]);
				}
			});
			pq.add(start);
			Arrays.fill(mintime, Long.MAX_VALUE);
			mintime[start] = 0;
			while (!pq.isEmpty()) {
				int pop = pq.poll();
				for (Edge g : list[pop]) {
					int go = g.to;
					if (mintime[pop] + g.time < mintime[go] && mintime[pop] <= g.maxtime) {
						mintime[go] = g.time + mintime[pop];
						pq.add(go);
					}
				}
			}
			if (mintime[end] != Long.MAX_VALUE) {
				System.out.print(mintime[end]);
			} else {
				System.out.print(-1);
			}
		}
 
		public class Edge {
			long time;
			long maxtime;
			int to;
 
			public Edge(long maxtime, int to, long time) {
				this.maxtime = maxtime;
				this.to = to;
				this.time = time;
			}
 
		}
 
	}
 
}
